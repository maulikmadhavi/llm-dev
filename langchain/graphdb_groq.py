# Start the server
# cd /mnt/d/libs/neo4j
# docker compose up -d

from langchain_community.graphs import Neo4jGraph
from langchain_groq import ChatGroq
import os
from langchain_core.documents import Document
from langchain_experimental.graph_transformers import LLMGraphTransformer
from langchain.chains import GraphCypherQAChain
from langchain_core.prompts import PromptTemplate


NEO4J_URI=os.getenv("NEO4J_URI", "neo4j://localhost:7687")
NEO4J_URI = "neo4j://localhost:7687" # Change this to your Neo4j instance URI
NEO4J_USERNAME=os.getenv('NEO4J_USERNAME', 'neo4j')
NEO4J_PASSWORD=os.getenv('NEO4J_PASSWORD', 'your_password')
NEO4J_PASSWORD = "your_password"
GROQ_API_KEY=os.getenv("GROQ_API_KEY")

print(f"Using Neo4j URI: {NEO4J_URI}")
print(f"Using Groq API Key: {GROQ_API_KEY}")
print(f"Using Neo4j Username: {NEO4J_USERNAME}")
print(f"Using Neo4j Password: {NEO4J_PASSWORD}")

# Initialize with sanitize=True to avoid APOC dependency
graph=Neo4jGraph(
    url=NEO4J_URI,
    username=NEO4J_USERNAME,
    password=NEO4J_PASSWORD,
    sanitize=True,
    refresh_schema=False,
)

print("Clearing existing graph data...")
try:
    graph.query("MATCH (n) DETACH DELETE n")
    print("Graph data cleared.")
except Exception as e:
    print(f"Error clearing graph data: {e}")
    # This might indicate a connection issue
    print("Please ensure your Neo4j instance is running and accessible.")


# Use environment variable for API key, fallback to None if not set
if GROQ_API_KEY:
    llm=ChatGroq(model="llama-3.3-70b-versatile")
else:
    raise ValueError("GROQ_API_KEY environment variable is not set")

text="""
Elon Reeve Musk (born June 28, 1971) is a businessman and investor known for his key roles in space
company SpaceX and automotive company Tesla, Inc. Other involvements include ownership of X Corp.,
formerly Twitter, and his role in the founding of The Boring Company, xAI, Neuralink and OpenAI.
He is one of the wealthiest people in the world; as of July 2024, Forbes estimates his net worth to be
US$221 billion.Musk was born in Pretoria to Maye and engineer Errol Musk, and briefly attended
the University of Pretoria before immigrating to Canada at age 18, acquiring citizenship through
his Canadian-born mother. Two years later, he matriculated at Queen's University at Kingston in Canada.
Musk later transferred to the University of Pennsylvania and received bachelor's degrees in economics
and physics. He moved to California in 1995 to attend Stanford University, but dropped out after
two days and, with his brother Kimbal, cofounded online city guide software company Zip2.
"""


documents=[Document(page_content=text)]

print("\nAttempting to transform text to graph documents...")
llm_transformer=LLMGraphTransformer(llm=llm)
graph_documents=llm_transformer.convert_to_graph_documents(documents)

print(f"Number of graph documents generated: {len(graph_documents)}")
if len(graph_documents) == 0:
    print("WARNING: No graph documents were generated by LLMGraphTransformer!")
    print("This indicates an issue with the LLM's ability to extract information from the text.")
    print("Possible causes: LLM too weak, text too complex, or LLM output format not matching expectations.")
else:
    print("Sample of generated graph documents:")
    for i, gd in enumerate(graph_documents[:2]): # Print first 2 for brevity
        print(f"  Graph Document {i+1}:")
        print(f"    Nodes: {[node.id for node in gd.nodes]}")
        print(f"    Relationships: {[(rel.source.id, rel.type, rel.target.id) for rel in gd.relationships]}")
    print("-" * 30)

print("Attempting to add graph documents to Neo4j...")
try:
    graph.add_graph_documents(graph_documents)
    print("Graph documents successfully added to Neo4j.")
except Exception as e:
    print(f"Error adding graph documents to Neo4j: {e}")
    print("This indicates a problem during ingestion. Check Neo4j connection and permissions.")

# Add a check to verify data after ingestion
print("\nVerifying data in Neo4j after ingestion...")
try:
    test_query_nodes = graph.query("MATCH (n) RETURN count(n) AS nodeCount")
    test_query_rels = graph.query("MATCH ()-[r]->() RETURN count(r) AS relCount")
    print(f"Nodes in DB: {test_query_nodes[0]['nodeCount']}")
    print(f"Relationships in DB: {test_query_rels[0]['relCount']}")
    if test_query_nodes[0]['nodeCount'] == 0:
        print("WARNING: Database still appears empty after ingestion. Check LLMGraphTransformer output and Neo4j connection/permissions.")
except Exception as e:
    print(f"Error verifying data in Neo4j: {e}")
    print("Could not connect to Neo4j for verification. Is it running?")


CYPHER_GENERATION_PROMPT = """
You are an expert Neo4j developer.
Your task is to convert a question into a Cypher query, based on the provided Neo4j schema.
Ensure the generated Cypher query is syntactically correct and accurately reflects the user's intent.

**Crucial Cypher Syntax Rules:**
- Always include node labels in the MATCH clause (e.g., `(p:Person)`, `(c:Company)`).
- Node names/identifiers are stored in the 'id' property. For example, to find a person named "Elon Reeve Musk", use `{{id: 'Elon Reeve Musk'}}`.

**Relationship Guidelines:**
- For questions about a person founding a company, you MUST generate a UNION of two separate MATCH statements to include both 'FOUNDER' and 'CO-FOUNDER' relationships. This is crucial for correctly identifying all relevant companies.
- For example, if the question asks for companies a person 'founded', the query should look like this:
  `MATCH (p:Person {{id: 'Person Name'}})-[:FOUNDER]->(c:Company) RETURN c.id`
  `UNION`
  `MATCH (p:Person {{id: 'Person Name'}})-[:COFOUNDER]->(c:Company) RETURN c.id`
  Make sure to replace 'Person Name' with the actual person's ID from the question.
- For questions about investment, use ':INVESTOR'.
- For questions about ownership, use ':OWNER'.

Do not include any explanations or apologies in your response.
Do not respond to questions that are not related to the graph database.
Always include a RETURN statement in the query, returning the 'id' property for node names.

Schema:
{schema}

Question: {question}
Cypher Query:
"""

cypher_prompt = PromptTemplate(
    input_variables=["schema", "question"],
    template=CYPHER_GENERATION_PROMPT,
)

chain = GraphCypherQAChain.from_llm(
    llm=llm,
    graph=graph,
    verbose=True,
    allow_dangerous_requests=True,
    return_intermediate_steps=True, # Keep this for debugging
    cypher_prompt=cypher_prompt # Add this
)

print("\nRunning the QA chain...")
print(chain.invoke({ "query": "What companies did Elon Musk found?"}))

